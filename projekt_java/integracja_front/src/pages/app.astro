---
import Layout from '../layouts/Layout.astro';

if (!Astro.locals.accessToken) {
	return Astro.redirect('/', 302);
}

const response = await fetch(import.meta.env.BACKEND_SERVER + '/renewableEnergy/', {
    headers: {
        authorization: 'Bearer ' + Astro.locals.accessToken,
        'content-type': 'application/json',
    },
});

if (response.status === 401) {
    return Astro.redirect('/logout', 302);
}

const json = await response.json();
const columns = Object.keys(json?.[0] ?? {});
---

<Layout title="App">
    <div>
        <button id="upload">Upload JSON</button> | <button id="download">Download JSON</button> | <button id="clear">Clear all</button> | <a href="/logout">Log out</a>
    </div>
    <table border="1">
        <thead>
            <tr>
                {columns.map(column => <th>{column}</th>)}
            </tr>
        </thead>
        <tbody>
            {json.map(row => (
                <tr>{Object.values(row).map(cell => <td>{cell}</td>)}</tr>
            ))}
        </tbody>
    </table>
</Layout>

<script>
const upload = document.getElementById('upload');
const download = document.getElementById('download');
const clear = document.getElementById('clear');

const selectFile = (contentType = [], multiple = false, onSelect) => {
    const input = document.createElement('input');
    input.hidden = true;
    input.type = 'file';
    input.multiple = multiple ?? false;
    input.accept = (contentType ?? []).join(',');

    input.onchange = () => {
        onSelect(multiple ? [...input.files] : input.files.item(0));
    };

    input.showPicker();
};

upload.onclick = () => {
    selectFile(['application/json'], false, async file => {
        try {
            upload.disabled = true;
            download.disabled = true;
            clear.disabled = true;

            const response = await fetch('/api/upload', {
                method: 'POST',
                body: file
            });

            if (response.ok) {
                window.location.reload();
                return;
            }

            if (response.status === 403) {
                alert('No access!');
                return;
            }

            alert(`Server HTTP status responded with ${response.status}`);
        } finally {
            upload.disabled = false;
            download.disabled = false;
            clear.disabled = false;
        }
    });
};

download.onclick = async () => {
    window.location.assign('/api/download');
};

clear.onclick = async () => {
    const response = await fetch('/api/clear');

    if (!response.ok) {
        alert('No access!');
        return;
    }

    window.location.reload();
};
</script>
